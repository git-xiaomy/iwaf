# iWAF Dashboard Configuration
# 
# This creates a separate dashboard site running on port 8080
# Place this file in /etc/nginx/sites-available/ and enable it
# or include it in your main nginx.conf
#

# Dashboard server running on separate port
server {
    listen 8080;
    listen [::]:8080;
    server_name _;
    
    # Dashboard root directory
    root /etc/nginx/iwaf/dashboard/web;
    index index.html;
    
    # Security headers for dashboard
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Optional: Restrict access to dashboard (recommended for production)
    # allow 192.168.1.0/24;
    # allow 10.0.0.0/8;
    # allow 127.0.0.1;
    # allow ::1;
    # deny all;
    
    # Main location for dashboard files
    location / {
        try_files $uri $uri/ =404;
        
        # Disable caching for dashboard files to ensure updates are seen
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # API endpoints for dashboard
    location /api/ {
        # Proxy to main server's API or handle directly
        content_by_lua_block {
            local iwaf = require "waf"
            local cjson = require "cjson"
            
            ngx.header.content_type = "application/json"
            ngx.header["Access-Control-Allow-Origin"] = "*"
            ngx.header["Access-Control-Allow-Methods"] = "GET, POST, OPTIONS"
            ngx.header["Access-Control-Allow-Headers"] = "Content-Type"
            
            -- Handle CORS preflight
            if ngx.var.request_method == "OPTIONS" then
                ngx.status = 200
                ngx.exit(200)
            end
            
            if ngx.var.request_method == "GET" then
                if ngx.var.uri == "/api/stats" then
                    ngx.say(iwaf.get_stats())
                elseif ngx.var.uri == "/api/config" then
                    -- Return current configuration
                    local config_json = iwaf.get_config()
                    ngx.say(cjson.encode({status = "success", config = cjson.decode(config_json)}))
                elseif ngx.var.uri == "/api/logs" then
                    -- Return recent logs (placeholder)
                    local logs = {
                        {timestamp = "2024-09-22 10:30:15", level = "info", message = "WAF启动成功"},
                        {timestamp = "2024-09-22 10:31:22", level = "warn", message = "检测到SQL注入尝试", ip = "192.168.1.50"},
                        {timestamp = "2024-09-22 10:32:45", level = "error", message = "阻止恶意请求", ip = "10.0.0.100"}
                    }
                    ngx.say(cjson.encode({status = "success", logs = logs}))
                end
            elseif ngx.var.request_method == "POST" then
                if ngx.var.uri == "/api/config" then
                    -- Update configuration
                    ngx.read_body()
                    local body = ngx.get_body_data()
                    if body then
                        local ok, config = pcall(cjson.decode, body)
                        if ok then
                            local success = iwaf.update_config(config)
                            if success then
                                ngx.say(cjson.encode({status = "success", message = "Config updated"}))
                            else
                                ngx.say(cjson.encode({status = "error", message = "Failed to save config"}))
                            end
                        else
                            ngx.say(cjson.encode({status = "error", message = "Invalid JSON"}))
                        end
                    else
                        ngx.say(cjson.encode({status = "error", message = "No data received"}))
                    end
                elseif ngx.var.uri == "/api/restart" then
                    -- Restart WAF (placeholder)
                    ngx.say(cjson.encode({status = "success", message = "WAF restart initiated"}))
                end
            end
        }
    }
    
    # Static assets with caching
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1h;
        add_header Cache-Control "public, immutable";
    }
    
    # Logging for dashboard
    access_log /var/log/nginx/iwaf_dashboard_access.log combined;
    error_log /var/log/nginx/iwaf_dashboard_error.log warn;
}