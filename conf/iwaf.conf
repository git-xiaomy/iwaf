# iWAF - Nginx Configuration
# 
# This configuration file sets up the iWAF module for Nginx
# Place this file in /etc/nginx/conf.d/ or include it in your main nginx.conf
#

# Define shared memory for WAF caching
# This is used for rate limiting and statistics
lua_shared_dict iwaf_cache 10m;

# Path to iWAF Lua modules
lua_package_path "/etc/nginx/iwaf/lua/?.lua;/etc/nginx/iwaf/lua/iwaf/?.lua;;";

# Initialize iWAF on Nginx startup
init_by_lua_block {
    local iwaf = require "waf"
    iwaf.init()
}

# Main server block with WAF protection
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Root directory for your website
    root /var/www/html;
    index index.html index.htm index.nginx-debian.html;
    
    # iWAF Access Phase - Check all incoming requests
    access_by_lua_block {
        local iwaf = require "waf"
        iwaf.check_request()
    }
    
    # Enable request body reading for POST data analysis
    lua_need_request_body on;
    
    # Set maximum request body size (adjust as needed)
    client_max_body_size 10m;
    
    # Main location block for your website
    location / {
        try_files $uri $uri/ =404;
    }
    
    # iWAF Management Interface
    location /iwaf/ {
        alias /etc/nginx/iwaf/web/;
        index index.html;
        
        # Optional: Restrict access to management interface
        # allow 192.168.1.0/24;
        # allow 127.0.0.1;
        # deny all;
        
        # Disable WAF checks for management interface
        access_by_lua_block {
            -- Skip WAF checks for management interface
        }
    }
    
    # iWAF API endpoints
    location /iwaf/api/ {
        content_by_lua_block {
            local iwaf = require "waf"
            local cjson = require "cjson"
            
            ngx.header.content_type = "application/json"
            
            if ngx.var.request_method == "GET" then
                if ngx.var.uri == "/iwaf/api/stats" then
                    ngx.say(iwaf.get_stats())
                elseif ngx.var.uri == "/iwaf/api/config" then
                    -- Return current configuration
                    ngx.say(cjson.encode({status = "success", message = "Config retrieved"}))
                end
            elseif ngx.var.request_method == "POST" then
                if ngx.var.uri == "/iwaf/api/config" then
                    -- Update configuration
                    ngx.read_body()
                    local body = ngx.get_body_data()
                    if body then
                        local ok, config = pcall(cjson.decode, body)
                        if ok then
                            local success = iwaf.update_config(config)
                            if success then
                                ngx.say(cjson.encode({status = "success", message = "Config updated"}))
                            else
                                ngx.say(cjson.encode({status = "error", message = "Failed to save config"}))
                            end
                        else
                            ngx.say(cjson.encode({status = "error", message = "Invalid JSON"}))
                        end
                    else
                        ngx.say(cjson.encode({status = "error", message = "No data received"}))
                    end
                end
            end
        }
        
        # Disable WAF checks for API endpoints
        access_by_lua_block {
            -- Skip WAF checks for API endpoints
        }
    }
    
    # Custom error pages
    error_page 403 /blocked.html;
    location = /blocked.html {
        root /etc/nginx/iwaf/web;
        internal;
    }
    
    # Logging configuration
    access_log /var/log/nginx/iwaf_access.log combined;
    error_log /var/log/nginx/iwaf_error.log warn;
}

# HTTPS version (optional)
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     server_name _;
#     
#     # SSL configuration
#     ssl_certificate /path/to/your/cert.pem;
#     ssl_certificate_key /path/to/your/key.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
#     ssl_prefer_server_ciphers on;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # Same configuration as HTTP version
#     root /var/www/html;
#     index index.html index.htm;
#     
#     access_by_lua_block {
#         local iwaf = require "waf"
#         iwaf.check_request()
#     }
#     
#     lua_need_request_body on;
#     client_max_body_size 10m;
#     
#     location / {
#         try_files $uri $uri/ =404;
#     }
#     
#     location /iwaf/ {
#         alias /etc/nginx/iwaf/web/;
#         index index.html;
#         access_by_lua_block {
#             -- Skip WAF checks
#         }
#     }
#     
#     location /iwaf/api/ {
#         content_by_lua_block {
#             local iwaf = require "waf"
#             local cjson = require "cjson"
#             
#             ngx.header.content_type = "application/json"
#             
#             if ngx.var.request_method == "GET" then
#                 if ngx.var.uri == "/iwaf/api/stats" then
#                     ngx.say(iwaf.get_stats())
#                 end
#             end
#         }
#         access_by_lua_block {
#             -- Skip WAF checks
#         }
#     }
#     
#     error_page 403 /blocked.html;
#     location = /blocked.html {
#         root /etc/nginx/iwaf/web;
#         internal;
#     }
#     
#     access_log /var/log/nginx/iwaf_ssl_access.log combined;
#     error_log /var/log/nginx/iwaf_ssl_error.log warn;
# }